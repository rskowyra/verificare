/*
 * PROMELLA Validation Model
 * Applicant
 * by T.Nakatani
 */

proctype applicant(byte n)
{	bool jointimer;
	byte type, state;

	state = out;
endIDLE:
	do
	:: user_to_appl[n]?type ->	/* event from macuser */
		if
		:: (type == reqjoin) ->
			if
			:: (state == out) ->
				jointimer = true;
				appl_to_llc[n]!join;
				state = lanx
			:: (state == lanx)	/* ignore */
			:: (state == in)	/* ignore */
			:: (state == vanx)	/* ignore */
			:: else -> assert(0)	/* protocol violation */
			fi
		:: (type == reqleave) ->
			if
			:: (state == out)	/* ignore */
			:: (state == lanx) ->
				jointimer = false;
				appl_to_llc[n]!leave;
				state = out
			:: (state == in) ->
				appl_to_llc[n]!leave;
				state = out
			:: (state == vanx) ->
				jointimer = false;
				appl_to_llc[n]!leave;
				state = out
			:: else -> assert(0)	/* protocol violation */
			fi
		:: else		/* ignore */
		fi

	:: llc_to_appl[n]?type->	/* event from llc */
		if
		:: (type == join) ->
			if
			:: (state == out)	/* ignore */
			:: (state == lanx) ->
				jointimer = false;
				state = in
			:: (state == in)	/* ignore */
			:: (state == vanx) ->
				jointimer = true;
				state = lanx
			:: else -> assert(0)	/* protocol violation */
			fi
		:: (type == leave) ->
			if
			:: (state == out)	/* ignore */
			:: (state == lanx) ->
				jointimer = true;
				state = vanx
			:: (state == in) ->
				jointimer =true;
				state = vanx
			:: (state == vanx) ->
				jointimer = true;
			:: else -> assert(0)	/* protocol violation */
			fi
		:: else		/* ignore */
		fi

	:: empty(user_to_appl[n]) && empty(llc_to_appl[n]) &&
		(jointimer == true) ->		/* jointimer expired */
		if
		:: (state == lanx) ->
			jointimer = false;
			appl_to_llc[n]!join;
			state = in
		:: (state == vanx) ->
			jointimer = false;
			appl_to_llc[n]!join;
			state = in
		:: else -> assert(0)	/* protocol violation */
		fi

	od
}
